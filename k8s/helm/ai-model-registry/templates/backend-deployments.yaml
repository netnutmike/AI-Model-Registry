{{- range $serviceName, $serviceConfig := .Values.backend }}
{{- if $serviceConfig.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ai-model-registry.fullname" $ }}-{{ $serviceName }}
  labels:
    {{- include "ai-model-registry.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ $serviceName }}
spec:
  replicas: {{ $serviceConfig.replicaCount }}
  selector:
    matchLabels:
      {{- include "ai-model-registry.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/component: {{ $serviceName }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "ai-model-registry.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: {{ $serviceName }}
    spec:
      {{- with $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ai-model-registry.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $serviceName }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: {{ include "ai-model-registry.image" (dict "repository" $serviceConfig.image.repository "tag" $serviceConfig.image.tag "Values" $.Values) }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $serviceConfig.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml $serviceConfig.resources | nindent 12 }}
          env:
            - name: PORT
              value: {{ $serviceConfig.service.port | quote }}
            - name: SERVICE_NAME
              value: {{ $serviceName | quote }}
            {{- if $serviceConfig.env }}
            {{- range $key, $value := $serviceConfig.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "ai-model-registry.fullname" $ }}-config
            {{- if $.Values.postgresql.external.existingSecret }}
            - secretRef:
                name: {{ $.Values.postgresql.external.existingSecret }}
            {{- end }}
            {{- if $.Values.redis.external.existingSecret }}
            - secretRef:
                name: {{ $.Values.redis.external.existingSecret }}
            {{- end }}
            {{- if $.Values.s3.existingSecret }}
            - secretRef:
                name: {{ $.Values.s3.existingSecret }}
            {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}