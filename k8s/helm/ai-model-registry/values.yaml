# Default values for ai-model-registry
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Common labels
commonLabels:
  app.kubernetes.io/name: ai-model-registry
  app.kubernetes.io/instance: ai-model-registry

# Image configuration
image:
  registry: docker.io
  repository: ai-model-registry
  tag: "latest"
  pullPolicy: IfNotPresent

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security context
podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: ai-model-registry.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ai-model-registry-tls
      hosts:
        - ai-model-registry.local

# Frontend service
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: ai-model-registry/frontend
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80

# Backend services configuration
backend:
  # Authentication Service
  auth:
    enabled: true
    replicaCount: 2
    image:
      repository: ai-model-registry/auth-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3001
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      JWT_SECRET: "your-jwt-secret"
      SSO_PROVIDER_URL: "https://your-sso-provider.com"
    
  # Model Registry Service
  modelRegistry:
    enabled: true
    replicaCount: 3
    image:
      repository: ai-model-registry/model-registry-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3002
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    
  # Policy Engine Service
  policyEngine:
    enabled: true
    replicaCount: 2
    image:
      repository: ai-model-registry/policy-engine-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3003
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    
  # Evaluation Service
  evaluation:
    enabled: true
    replicaCount: 2
    image:
      repository: ai-model-registry/evaluation-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3004
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    
  # Deployment Service
  deployment:
    enabled: true
    replicaCount: 2
    image:
      repository: ai-model-registry/deployment-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3005
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    
  # Audit Service
  audit:
    enabled: true
    replicaCount: 2
    image:
      repository: ai-model-registry/audit-service
      tag: "latest"
    service:
      type: ClusterIP
      port: 3006
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# API Gateway
apiGateway:
  enabled: true
  replicaCount: 2
  image:
    repository: ai-model-registry/api-gateway
    tag: "latest"
  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Database configuration (Aurora PostgreSQL)
postgresql:
  enabled: false  # Use external Aurora cluster
  external:
    enabled: true
    host: "aurora-cluster.cluster-xxx.us-west-2.rds.amazonaws.com"
    port: 5432
    database: "ai_model_registry"
    username: "postgres"
    existingSecret: "postgresql-credentials"
    existingSecretPasswordKey: "password"

# Redis configuration
redis:
  enabled: false  # Use external Redis cluster
  external:
    enabled: true
    host: "redis-cluster.xxx.cache.amazonaws.com"
    port: 6379
    existingSecret: "redis-credentials"
    existingSecretPasswordKey: "password"

# S3 configuration for artifact storage
s3:
  bucket: "ai-model-registry-artifacts"
  region: "us-west-2"
  existingSecret: "s3-credentials"

# Monitoring and observability
monitoring:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
  grafana:
    enabled: true
    dashboards:
      enabled: true
  jaeger:
    enabled: true
    agent:
      host: "jaeger-agent"
      port: 6831

# Health checks
healthChecks:
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5

# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1