name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-results.json || true
        npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: npm-audit-results.json
        
    - name: Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-results.json
      continue-on-error: true
      
    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-results
        path: snyk-results.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint security rules
      run: |
        npx eslint . --ext .ts,.tsx --format json --output-file eslint-security-results.json || true
        npx eslint . --ext .ts,.tsx
      continue-on-error: true
      
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript
        
  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build backend Docker image
      run: |
        docker build -f backend/Dockerfile -t ai-model-registry-backend:latest .
        
    - name: Build frontend Docker image
      run: |
        docker build -f frontend/Dockerfile -t ai-model-registry-frontend:latest .
        
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ai-model-registry-backend:latest'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ai-model-registry-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'
        
    - name: Upload Trivy frontend scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'
        
    - name: Run Docker Scout (if available)
      run: |
        if command -v docker-scout &> /dev/null; then
          docker scout cves ai-model-registry-backend:latest --format sarif --output docker-scout-backend.sarif || true
          docker scout cves ai-model-registry-frontend:latest --format sarif --output docker-scout-frontend.sarif || true
        fi
      continue-on-error: true

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        license-checker --json --out license-report.json
        license-checker --summary
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Dependency Vulnerabilities" >> security-summary.md
        if [ -f npm-audit-results/npm-audit-results.json ]; then
          echo "- npm audit results available" >> security-summary.md
        fi
        if [ -f snyk-results/snyk-results.json ]; then
          echo "- Snyk scan results available" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        echo "## License Compliance" >> security-summary.md
        if [ -f license-report/license-report.json ]; then
          echo "- License report generated" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        echo "## Container Security" >> security-summary.md
        echo "- Trivy container scans completed" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Static Analysis" >> security-summary.md
        echo "- Semgrep SAST scan completed" >> security-summary.md
        echo "- CodeQL analysis completed" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md